name: Build majestic runtime

on: push

jobs:

  ubuntu:
    name: Build on Ubuntu
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2

    # All these are already available in GitHub runner
    # - name: Install build tools
    #   run: |
    #     sudo apt-get update
    #     sudo apt-get install -y \
    #       autoconf \
    #       automake \
    #       libtool \
    #       make \
    #       g++

    - name: Build C runtime
      working-directory: ./src/runtime/c
      run: |
        autoreconf -i
        ./configure
        make
        sudo make install

    #- name: Setup Haskell
    #  uses: haskell/actions/setup@v1
    #  # with:
    #  #   ghc-version: '8.6'
    #  #   cabal-version: '2.4.1.0'

    #- name: Run Haskell testsuite
    #  working-directory: ./src/runtime/haskell
    #  env:
    #    LD_LIBRARY_PATH: /usr/local/lib
    #  run: |
    #    cabal test --extra-lib-dirs=/usr/local/lib

    #- name: Install Python bindings
    #  working-directory: ./src/runtime/python
    #  run: |
    #    python setup.py build
    #    sudo python setup.py install

    #- name: Run Python testsuite
    #  working-directory: ./src/runtime/python
    #  env:
    #    LD_LIBRARY_PATH: /usr/local/lib
    #  run: |
    #    pip install pytest
    #    pytest

    #- name: Run JavaScript testsuite
    #  working-directory: ./src/runtime/javascript
    #  env:
    #    LD_LIBRARY_PATH: /usr/local/lib
    #  run: |
    #    npm ci
    #    npm run test

    - name: Setup Java
      run: |
        sudo apt-get install --yes --no-install-recommends default-jre
        sudo apt-get install --yes --no-install-recommends default-jdk
        sudo apt-get install --yes --no-install-recommends junit4
        sudo apt-get install --yes --no-install-recommends libtool-bin 
  
    - name: Install Java bindings
      working-directory: ./src/runtime/java
      env:
        LD_LIBRARY_PATH: /usr/local/lib
      run: |
        make
        make install
    
    - name: Compile and run Java testsuite
      working-directory: ./src/runtime/java
      run: |
        javac -cp .:/usr/share/java/junit4.jar TestBasic.java
        java -Djava.library.path=$LD_LIBRARY_PATH -cp .:/usr/share/java/junit4.jar org.junit.runner.JUnitCore TestBasic
          
#  macos:
#    name: Build on macOS
#    runs-on: macOS-11
#
#    steps:
#    - uses: actions/checkout@v2
#
#    # All these are already available in GitHub runner
#    # - name: Install build tools
#    #   run: |
#    #     sudo apt-get update
#    #     sudo apt-get install -y \
#    #       autoconf \
#    #       automake \
#    #       libtool \
#    #       make \
#    #       g++
#
#    - name: Build C runtime
#      working-directory: ./src/runtime/c
#      run: |
#        glibtoolize
#        autoreconf -i
#        ./configure
#        make
#        sudo make install
#
#    - name: Setup Haskell
#      uses: haskell/actions/setup@v1
#      # with:
#      #   ghc-version: '8.6'
#      #   cabal-version: '2.4.1.0'

    # - name: Run Haskell testsuite
    #   working-directory: ./src/runtime/haskell
    #   env:
    #     LD_LIBRARY_PATH: /usr/local/lib
    #   run: |
    #     cabal test --extra-lib-dirs=/usr/local/lib

    # - name: Install Python bindings
    #   working-directory: ./src/runtime/python
    #   run: |
    #     python setup.py build
    #     sudo python setup.py install
    #
    # - name: Run Python testsuite
    #   working-directory: ./src/runtime/python
    #   env:
    #     LD_LIBRARY_PATH: /usr/local/lib
    #   run: |
    #     pip install pytest
    #     pytest
    #
    # - name: Run JavaScript testsuite
    #   working-directory: ./src/runtime/javascript
    #   env:
    #     LD_LIBRARY_PATH: /usr/local/lib
    #   run: |
    #     npm ci
    #     npm run test
